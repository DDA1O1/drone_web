name: Docker Publish CI for v1 Tags

# Controls when the workflow will run
on:
  push:
    tags:
      - 'v1.*.*' # Trigger ONLY on version tags starting with v1.
                 # Examples: v1.0.0, v1.2.3, v1.15.0 will trigger
                 # Examples: v2.0.0, main branch pushes, other tags will NOT trigger
  workflow_dispatch: {} # Allows manual triggering from the Actions tab

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use a standard Linux runner
    permissions:
      contents: read      # Allow reading repo contents
      packages: write     # Needed for pushing to registries

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx (enhances build capabilities)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Extract metadata (tags, labels) for Docker
      # This action automatically determines appropriate tags based on the event
      - name: Docker meta
        id: meta # Assign an ID to reference outputs later
        uses: docker/metadata-action@v5
        with:
          # Replace 'your-dockerhub-username/tello-drone-control' with your actual Docker Hub image name
          images: ${{ secrets.DOCKERHUB_USERNAME }}/tello-drone-control
          tags: |
            # tag with the git version tag (e.g., v1.2.0 -> 1.2.0)
            type=ref,event=tag
            # tag with the short git commit SHA - useful for linking builds to code
            type=sha,prefix=,suffix=,format=short
            # --- We removed the 'latest' tag generation ---
            # If you WANT the latest v1.*.* tag push to ALSO be tagged 'latest', uncomment the next line:
            # type=raw,value=latest

      # 4. Log in to Docker Hub using the secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use the PAT stored in secrets

      # 5. Build the Docker image using the Dockerfile and push it to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory as build context
          file: ./Dockerfile # Specify the Dockerfile location
          push: true # Actually push the image
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the 'meta' step
          labels: ${{ steps.meta.outputs.labels }} # Add useful labels generated by the 'meta' step
          cache-from: type=gha # Enable GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max