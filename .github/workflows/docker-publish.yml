name: Docker Publish CI

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ] # Trigger on pushes to the main branch
    tags: [ "v*.*.*" ]   # Trigger on version tags like v1.0.0, v1.2.3 etc.
  workflow_dispatch: {} # Allows manual triggering from the Actions tab

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use a standard Linux runner
    permissions:
      contents: read      # Allow reading repo contents
      packages: write     # Needed for pushing to registries (like GHCR, but good practice)

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Docker Buildx (enhances build capabilities)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3. Extract metadata (tags, labels) for Docker
      # This action automatically determines appropriate tags based on the event
      - name: Docker meta
        id: meta # Assign an ID to reference outputs later
        uses: docker/metadata-action@v5
        with:
          # Replace 'your-dockerhub-username/tello-drone-control' with your actual Docker Hub image name
          images: ${{ secrets.DOCKERHUB_USERNAME }}/tello-drone-control
          tags: |
            # tag 'latest' for default branch pushes (e.g., main)
            type=raw,value=latest,enable={{is_default_branch}}
            # tag with the git version tag if triggered by a tag (e.g., v1.2.0 -> 1.2.0)
            type=ref,event=tag
            # tag with the short git commit SHA - useful for linking builds to code
            type=sha,prefix=,suffix=,format=short

      # 4. Log in to Docker Hub using the secrets
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use the PAT stored in secrets

      # 5. Build the Docker image using the Dockerfile and push it to Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Use the current directory as build context
          file: ./Dockerfile # Specify the Dockerfile location
          push: true # Actually push the image
          tags: ${{ steps.meta.outputs.tags }} # Use the tags generated by the 'meta' step
          labels: ${{ steps.meta.outputs.labels }} # Add useful labels generated by the 'meta' step
          cache-from: type=gha # Enable GitHub Actions cache for faster builds
          cache-to: type=gha,mode=max